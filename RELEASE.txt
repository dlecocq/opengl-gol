# Version 0.2
# Major Changes

1. Shaders

	Virtually all of the primitives use fragment shaders at this point
	to accomplish their various tasks.  Any primitives that don't will
	likely be deprecated, but some will be kept - this will be decided
	on a case by case basis.
	
	This means several things. First, in order to use this package you
	will need a graphics card that supports GLSL and fragment, vertex
	and geometry shaders.  Most modern hardware seems to support the
	first two, but the third is not as ubiquitous, though by and large
	it seems to be supported.  If this turns out to not be the case, I
	will look at maintaining two versions of certain key primitives.
	
	Second, functions no longer need to be specified by function point-
	ers. This package makes use of GLSL's JIT compiling of shaders to
	get a free parsing at the same time. The function class will likely
	remain in the next few versions, but it should be considered unsafe
	to use at this point.

2. New Primitives

	2.1. Contour
	
		Contours, or iso-curves can be represented with the contour class.
		It accepts a function in x, y and t (see section 4) and renders
		the iso-curve for that function at z = 0.  Future versions will
		have support for user-specified iso-values.
		
	2.2. Flow
	
		Flow fields can be rendered with the flow class. They use highly-
		accurate Runge-Kutta integration for dye advection in the form of
		a streamline.  I would like to support pathlines and streaklines
		in future releases, but for the time being it's "limited" to str-
		eamlines.
		
		Currently there are only uniformly-spaced streamlines, but I'm
		looking at a paper to implement a good spacing algorithm.
	
	2.3. Parametric Curves
	
		Parametric curves are represented by x and y coordinates returned
		as a function of some parameter s. NOTE: In their current incar-
		nation parametric curves to not support time-dependence. These
		also are not calculated by a shader at this point, but this will
		take place in the next release.
	
	2.4. Scalar Field
	
		A scalar-valued function of x, y, and t (see section 4) can be 
		rendered with this scalar field class. It's rendered in the frag-
		ment shader and expects the value of the function to be normalized
		to [-1,1].
		
3. Updated Primitives

	3.1 Curve
	
		The curve class now has its values calculated and its geometry 
		determined on the graphics card.
		
4. Time Dependence

	Most (and unless I've forgotten something) primitives support time
	dependence.  That means that in addition to the x (and in some cases
	y variables) one can use the value t as time.  This is measured from
	the time that grapher::initialize is called, and I'm deciding how
	best to provide the programmer access to changing this.  Input is
	welcome on this item, and things I'm considering are: a reset function
	to reset the timer, and user-specified offsets for each primitive. 
	(Like, the user could specify that one primitive might use the time
	plus 3.5 seconds and another might use time minus 3.14 second, etc.)
	
5. Grapher Restructuring and Extensibility

	The grapher container class no longer needs to be heavily modified in
	order to add support for a new primitive. A primitive may inherit from 
	the primitive class and must simply provide GL-style way to represent
	its geometry. A shader may be specified by storing the shader program
	handle in the class's value p, inherited from primitive.
	
6. Deprecations

	6.1 Vector Field
	
		Vector fields will likely be removed, replaced by the more represent-
		ative and flexible flow field.
		
	6.2 Line
	
		A separate line class is likely no longer needed, if adaptive sampling
		can be achieved.  Either way, since curves are calculated mostly on 
		the graphics hardware anyway, there isn't any justification in keeping
		a separate primitive around anyway.

7. Roadmap

	7.1 Parametric Curves
		- Time dependence
		- Rendered in shaders

	7.2 Flow field
		- Streaklines, Pathlines
		- Adaptive spacing algorithm
		
	7.3 Time Dependence
		- Timing interface